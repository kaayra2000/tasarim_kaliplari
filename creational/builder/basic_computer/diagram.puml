@startuml builder-without-director
/'
 * @file builder-without-director.puml
 * @brief Builder Pattern - Director olmadan basit yaklaşım
 * @author AI Assistant
 * @date 15.10.2025
 * @version 1.0
 * 
 * @description Bu diyagram Builder pattern'in Director sınıfı olmadan
 *              nasıl kullanılabileceğini gösterir. Builder'ın kendisi
 *              construction sürecini yönetir.
 '/

title Builder Pattern - Director Olmadan (Basit Yaklaşım)

skinparam classAttributeIconSize 0
skinparam backgroundColor #FFFFFF
skinparam shadowing false

skinparam class {
    BackgroundColor #E8F4F8
    BorderColor #2C5F7C
    ArrowColor #2C5F7C
}

' Product sınıfı
class Computer {
    +CPU: string
    +RAM: string
    +storage: string
    +GPU: string
    __
    +show(): void
}

' Abstract Builder
abstract class ComputerBuilder {
    #computer: unique_ptr<Computer>
    __
    +ComputerBuilder()
    +{abstract} buildCPU(): void
    +{abstract} buildRAM(): void
    +{abstract} buildStorage(): void
    +{abstract} buildGPU(): void
    +build(): unique_ptr<Computer>
}

' Concrete Builders
class GamingComputerBuilder {
    +buildCPU(): void
    +buildRAM(): void
    +buildStorage(): void
    +buildGPU(): void
}

class OfficeComputerBuilder {
    +buildCPU(): void
    +buildRAM(): void
    +buildStorage(): void
    +buildGPU(): void
}

' İlişkiler
ComputerBuilder ..> Computer : <<creates>>
ComputerBuilder <|-- GamingComputerBuilder
ComputerBuilder <|-- OfficeComputerBuilder

note right of ComputerBuilder
  **build() metodu construction'ı yönetir:**
  1. buildCPU()
  2. buildRAM()
  3. buildStorage()
  4. buildGPU()
  5. return computer
  
  **Director'a gerek yok!**
end note

note bottom of GamingComputerBuilder
  **Örnek Kullanım:**
  GamingComputerBuilder builder;
  auto pc = builder.build();
  pc->show();
end note

note "**Avantajlar:**\n• Daha basit kod\n• Daha az sınıf\n• Client için kolay kullanım\n• Modern C++ yaklaşımı" as N1

footer Oluşturulma: 15.10.2025 | Versiyon: 1.0 | Pattern: Builder (Simplified)

@enduml

